{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAClB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCJbC,G,MAAS,SAACR,GAAD,OAElB,aADH,CACG,OAAKC,UAAU,YAAf,SAECD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAwBA,QAASA,GAArBA,EAAQC,WCLhBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAErB,uBAAOZ,UAAU,SAASa,KAAK,SAC/BF,YAAaA,EAAaG,SAAUF,MCwEzBG,E,kDAxEb,aAAe,IAAD,8BACZ,gBAoBFH,aAAe,SAACI,GAMd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAzBtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,gEAUO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,+BAgBpC,MAI2BC,KAAKN,MAA/Bb,EAJD,EAICA,SAAUU,EAJX,EAIWA,YAEZU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEnG,OACE,sBAAK9B,UAAU,MAAf,UACA,kDACE,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKf,eAE5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA5CVI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.64a2e958.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) =>(\r\n    <div className=\"card-container\">\r\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styles.css'\r\nexport const CardList=(props) =>(\r\n //   console.log(props);\r\n    <div className=\"card-list\">\r\n    {/*props.children*/}\r\n    {props.monsters.map(monster => (\r\n         <Card  key={monster.id} monster={monster}></Card>\r\n        ))}\r\n    </div>\r\n)","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) =>(\r\n \r\n    <input className='search' type='search' \r\n    placeholder={placeholder} onChange={handleChange}/>\r\n)","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { CardList } from './Components/card-list/card-list.component';\r\nimport { SearchBox } from './Components/search-box/search-box.component.jsx';\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    }\r\n\r\n    //Convert handleChange function to arror function and binding not needed [ES6 Syntex]\r\n    //this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ monsters: users }));\r\n  }\r\n\r\n  //handleChange function this.SetState will give error of this undefined\r\n  //to prevent this, either bind function with this on constructor \r\n  //    this.handleChange = this.handleChange.bind(this);\r\n  //or convert function to arrow function\r\n  //  handleChange(e)  to handleChange =(e) =>\r\n  handleChange = (e) =>{\r\n    //due to async nature of setState, values not update immediatly, callback \r\n    //function gets called after async call finish\r\n    //in other words dependent functionality on async call should be in callback\r\n    //this.setState({searchField:e.target.value},()=>console.log(this.state))\r\n    //or\r\n    this.setState({ searchField: e.target.value })\r\n  }\r\n  render() {\r\n    // const monsters  = this.state.monsters;\r\n    // const searchField = this.state.searchField;\r\n    //This is exactly same implementation as in above two line, excpet it's a shorter way to write\r\n    const { monsters, searchField } = this.state;\r\n\r\n    const filteredMonster = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n    return (\r\n      <div className=\"App\">\r\n      <h1>Monsters Rolodex</h1>\r\n        <SearchBox placeholder='search monsters' handleChange={this.handleChange}>\r\n        </SearchBox>\r\n        <CardList monsters={filteredMonster} />\r\n        {/* <CardList monsters={this.state.monsters}>\r\n       </CardList>*/}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}